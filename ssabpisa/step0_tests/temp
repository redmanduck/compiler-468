;IR code
;LABEL main [FRMT-8]; --- LIVEIN: [newapprox], LIVEOUT: [newapprox], GEN [] KILL []
;LINK [FRMT-9]; --- LIVEIN: [newapprox], LIVEOUT: [newapprox], GEN [] KILL []
;STOREF 5.125 $T1 [FRMT-1]; --- LIVEIN: [newapprox], LIVEOUT: [$T1, newapprox], GEN [] KILL [$T1]
;STOREF $T1 num [FRMT-2]; --- LIVEIN: [$T1, newapprox], LIVEOUT: [num, newapprox], GEN [$T1] KILL [num]
;STOREI 5 $T2 [FRMT-0]; --- LIVEIN: [num, newapprox], LIVEOUT: [$T2, num, newapprox], GEN [] KILL [$T2]
;STOREI $T2 i [FRMT-2]; --- LIVEIN: [$T2, num, newapprox], LIVEOUT: [num, newapprox, i], GEN [$T2] KILL [i]
;MULTF i num $T3 [FRMT-3]; --- LIVEIN: [num, newapprox, i], LIVEOUT: [$T3, num, newapprox, i], GEN [num, i] KILL [$T3]
;STOREI $T3 j [FRMT-2]; --- LIVEIN: [$T3, num, newapprox, i], LIVEOUT: [num, newapprox, j, i], GEN [$T3] KILL [j]
;STOREI 2 $T4 [FRMT-0]; --- LIVEIN: [num, newapprox, j, i], LIVEOUT: [num, $T4, newapprox, j, i], GEN [] KILL [$T4]
;MULTF num $T4 $T5 [FRMT-7]; --- LIVEIN: [num, $T4, newapprox, j, i], LIVEOUT: [num, $T5, newapprox, j, i], GEN [num, $T4] KILL [$T5]
;STOREF $T5 approx [FRMT-2]; --- LIVEIN: [num, $T5, newapprox, j, i], LIVEOUT: [num, approx, newapprox, j, i], GEN [$T5] KILL [approx]
;WRITEF approx [FRMT-6]; --- LIVEIN: [approx, num, newapprox, j, i], LIVEOUT: [num, approx, newapprox, j, i], GEN [approx] KILL []
;----------------- tiny ------------------------
;-------------------------------------------------------
; ir node ;LABEL main! (FRMT-8)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;LINK! (FRMT-9)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;STOREF 5.125 $T1! (FRMT-1)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T1
; $T1: not loaded in any register..
; Attempting to allocate $T1
; $T1: not loaded in any register..
; allocating $T1@($-1) to r0
;-------------------------------------------------------
; ir node ;STOREF $T1 num! (FRMT-2)
; reg state : {r0=$T1*, r1=none, r2=none, r3=none, }
; attempting to ensure $T1
; found $T1 in r0
; ensuring $T1 use r0
; attempting to ensure num
; num: not loaded in any register..
; Attempting to allocate num
; num: not loaded in any register..
; allocating num@(num) to r1
;-------------------------------------------------------
; ir node ;STOREI 5 $T2! (FRMT-0)
; reg state : {r0=$T1*, r1=num*, r2=none, r3=none, }
; attempting to ensure $T2
; $T2: not loaded in any register..
; Attempting to allocate $T2
; $T2: not loaded in any register..
; allocating $T2@($-2) to r2
;-------------------------------------------------------
; ir node ;STOREI $T2 i! (FRMT-2)
; reg state : {r0=$T1*, r1=num*, r2=$T2*, r3=none, }
; attempting to ensure $T2
; found $T2 in r2
; ensuring $T2 use r2
; attempting to ensure i
; i: not loaded in any register..
; Attempting to allocate i
; i: not loaded in any register..
; allocating i@(i) to r3
;-------------------------------------------------------
; ir node ;MULTF i num $T3! (FRMT-3)
; reg state : {r0=$T1*, r1=num*, r2=$T2*, r3=i*, }
; attempting to ensure i
; found i in r3
; ensuring i use r3
; attempting to ensure num
; found num in r1
; ensuring num use r1
; attempting to ensure $T3
; $T3: not loaded in any register..
; Attempting to allocate $T3
; $T3: not loaded in any register..
; No free register! Choosing most distant used reg : r0
; evicting r0 for opr $T1
; Checking Liveness $T1
; Live out: [$T3, num, newapprox, i]
; $T1 is dead
; free: false, dirty:true, live: false
; spilling r0
; allocating $T3@($-3) to r0
;-------------------------------------------------------
; ir node ;STOREI $T3 j! (FRMT-2)
; reg state : {r0=$T3*, r1=num*, r2=$T2*, r3=i*, }
; attempting to ensure $T3
; found $T3 in r0
; ensuring $T3 use r0
; attempting to ensure j
; j: not loaded in any register..
; Attempting to allocate j
; j: not loaded in any register..
; No free register! Choosing most distant used reg : r1
; evicting r1 for opr num
; Checking Liveness num
; Live out: [num, newapprox, j, i]
; num is live
; free: false, dirty:true, live: true
; spilling r1
; allocating j@(j) to r1
;-------------------------------------------------------
; ir node ;STOREI 2 $T4! (FRMT-0)
; reg state : {r0=$T3*, r1=j*, r2=$T2*, r3=i*, }
; attempting to ensure $T4
; $T4: not loaded in any register..
; Attempting to allocate $T4
; $T4: not loaded in any register..
; No free register! Choosing most distant used reg : r2
; evicting r2 for opr $T2
; Checking Liveness $T2
; Live out: [num, $T4, newapprox, j, i]
; $T2 is dead
; free: false, dirty:true, live: false
; spilling r2
; allocating $T4@($-4) to r2
;-------------------------------------------------------
; ir node ;MULTF num $T4 $T5! (FRMT-7)
; reg state : {r0=$T3*, r1=j*, r2=$T4*, r3=i*, }
; attempting to ensure num
; num: not loaded in any register..
; Attempting to allocate num
; num: not loaded in any register..
; No free register! Choosing most distant used reg : r3
; evicting r3 for opr i
; Checking Liveness i
; Live out: [num, $T5, newapprox, j, i]
; i is live
; free: false, dirty:true, live: true
; spilling r3
; allocating num@(num) to r3
; attempting to ensure $T4
; found $T4 in r2
; ensuring $T4 use r2
; attempting to ensure $T5
; $T5: not loaded in any register..
; Attempting to allocate $T5
; $T5: not loaded in any register..
; No free register! Choosing most distant used reg : r0
; evicting r0 for opr $T3
; Checking Liveness $T3
; Live out: [num, $T5, newapprox, j, i]
; $T3 is dead
; free: false, dirty:true, live: false
; spilling r0
; allocating $T5@($-5) to r0
;-------------------------------------------------------
; ir node ;STOREF $T5 approx! (FRMT-2)
; reg state : {r0=$T5*, r1=j*, r2=$T4*, r3=num, }
; attempting to ensure $T5
; found $T5 in r0
; ensuring $T5 use r0
; attempting to ensure approx
; approx: not loaded in any register..
; Attempting to allocate approx
; approx: not loaded in any register..
; No free register! Choosing most distant used reg : r1
; evicting r1 for opr j
; Checking Liveness j
; Live out: [num, approx, newapprox, j, i]
; j is live
; free: false, dirty:true, live: true
; spilling r1
; allocating approx@(approx) to r1
;-------------------------------------------------------
; ir node ;WRITEF approx! (FRMT-6)
; reg state : {r0=$T5*, r1=approx*, r2=$T4*, r3=num, }
; attempting to ensure approx
; found approx in r1
; ensuring approx use r1
var i
var j
var newapprox
var approx
var num
push
push r0
push r1
push r2
push r3
jsr main
sys halt
;------------------;LABEL main ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

label main
;  {r0=none, r1=none, r2=none, r3=none, }
link 15
;------------------;STOREF 5.125 $T1 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-1 r0 ; load ensure $T1

move 5.125 r0
;  {r0=$T1*, r1=none, r2=none, r3=none, }
;------------------;STOREF $T1 num ----------------
;  {r0=$T1*, r1=none, r2=none, r3=none, }

move num r1 ; load ensure num

move r0 r1
;  {r0=$T1*, r1=num*, r2=none, r3=none, }
;------------------;STOREI 5 $T2 ----------------
;  {r0=$T1*, r1=num*, r2=none, r3=none, }

move $-2 r2 ; load ensure $T2

move 5 r2
;  {r0=$T1*, r1=num*, r2=$T2*, r3=none, }
;------------------;STOREI $T2 i ----------------
;  {r0=$T1*, r1=num*, r2=$T2*, r3=none, }

move i r3 ; load ensure i

move r2 r3
;  {r0=$T1*, r1=num*, r2=$T2*, r3=i*, }
;------------------;MULTF i num $T3 ----------------
;  {r0=$T1*, r1=num*, r2=$T2*, r3=i*, }

mulr r3 r1
move r0 $-1 ; spill $T1

move $-3 r0 ; load ensure $T3

move r1 r0
;  {r0=$T3*, r1=num*, r2=$T2*, r3=i*, }
;------------------;STOREI $T3 j ----------------
;  {r0=$T3*, r1=num*, r2=$T2*, r3=i*, }

move r1 num ; spill num

move j r1 ; load ensure j

move r0 r1
;  {r0=$T3*, r1=j*, r2=$T2*, r3=i*, }
;------------------;STOREI 2 $T4 ----------------
;  {r0=$T3*, r1=j*, r2=$T2*, r3=i*, }

move r2 $-2 ; spill $T2

move $-4 r2 ; load ensure $T4

move 2 r2
;  {r0=$T3*, r1=j*, r2=$T4*, r3=i*, }
;------------------;MULTF num $T4 $T5 ----------------
;  {r0=$T3*, r1=j*, r2=$T4*, r3=i*, }

move r3 i ; spill i

move num r3 ; load ensure num

mulr r2 r3
move r0 $-3 ; spill $T3

move $-5 r0 ; load ensure $T5

move r3 r0
;  {r0=$T5*, r1=j*, r2=$T4*, r3=num, }
;------------------;STOREF $T5 approx ----------------
;  {r0=$T5*, r1=j*, r2=$T4*, r3=num, }

move r1 j ; spill j

move approx r1 ; load ensure approx

move r0 r1
;  {r0=$T5*, r1=approx*, r2=$T4*, r3=num, };------------------;WRITEF approx ----------------
;  {r0=$T5*, r1=approx*, r2=$T4*, r3=num, }

sys writer r1
;  {r0=$T5*, r1=approx*, r2=$T4*, r3=num, }
