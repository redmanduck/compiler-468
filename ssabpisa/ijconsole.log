;IR code
;LABEL main [FRMT-8]; --- LIVEIN: [newapprox, eol], LIVEOUT: [newapprox, eol], GEN [] KILL []
;LINK [FRMT-9]; --- LIVEIN: [newapprox, eol], LIVEOUT: [newapprox, eol], GEN [] KILL []
;STOREF 7.0 $T1 [FRMT-1]; --- LIVEIN: [newapprox, eol], LIVEOUT: [$T1, newapprox, eol], GEN [] KILL [$T1]
;STOREF $T1 num [FRMT-2]; --- LIVEIN: [$T1, newapprox, eol], LIVEOUT: [num, newapprox, eol], GEN [$T1] KILL [num]
;STOREI 5 $T2 [FRMT-0]; --- LIVEIN: [num, newapprox, eol], LIVEOUT: [$T2, num, newapprox, eol], GEN [] KILL [$T2]
;STOREI $T2 i [FRMT-2]; --- LIVEIN: [$T2, num, newapprox, eol], LIVEOUT: [num, newapprox, eol, i], GEN [$T2] KILL [i]
;STOREI 1 $T3 [FRMT-0]; --- LIVEIN: [num, newapprox, eol, i], LIVEOUT: [$T3, num, newapprox, eol, i], GEN [] KILL [$T3]
;STOREI $T3 j [FRMT-2]; --- LIVEIN: [$T3, num, newapprox, eol, i], LIVEOUT: [num, newapprox, eol, j, i], GEN [$T3] KILL [j]
;STOREF num approx [FRMT-10]; --- LIVEIN: [num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [num] KILL [approx]
;----------------
;LABEL label1 [FRMT-8]; --- LIVEIN: [approx, num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [] KILL []
;STOREI 0 $T4 [FRMT-0]; --- LIVEIN: [approx, num, newapprox, eol, j, i], LIVEOUT: [num, approx, $T4, newapprox, eol, j, i], GEN [] KILL [$T4]
;----------------
;EQI i $T4 label2 [FRMT-13]; --- LIVEIN: [approx, num, $T4, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [$T4, i] KILL []
;WRITEI i [FRMT-6]; --- LIVEIN: [approx, num, eol, j, i], LIVEOUT: [num, approx, eol, j, i], GEN [i] KILL []
;WRITES eol [FRMT-6]; --- LIVEIN: [approx, num, eol, j, i], LIVEOUT: [num, approx, eol, j, i], GEN [eol] KILL []
;STOREF 0.5 $T5 [FRMT-1]; --- LIVEIN: [approx, num, eol, j, i], LIVEOUT: [num, approx, $T5, eol, j, i], GEN [] KILL [$T5]
;DIVF num approx $T6 [FRMT-3]; --- LIVEIN: [approx, num, $T5, eol, j, i], LIVEOUT: [num, approx, $T6, $T5, eol, j, i], GEN [approx, num] KILL [$T6]
;ADDF approx $T6 $T7 [FRMT-7]; --- LIVEIN: [approx, num, $T6, $T5, eol, j, i], LIVEOUT: [num, $T7, $T5, eol, j, i], GEN [approx, $T6] KILL [$T7]
;MULTF $T5 $T7 $T8 [FRMT-5]; --- LIVEIN: [num, $T7, $T5, eol, j, i], LIVEOUT: [num, eol, $T8, j, i], GEN [$T7, $T5] KILL [$T8]
;STOREF $T8 newapprox [FRMT-2]; --- LIVEIN: [num, eol, $T8, j, i], LIVEOUT: [num, newapprox, eol, j, i], GEN [$T8] KILL [newapprox]
;WRITEF newapprox [FRMT-6]; --- LIVEIN: [num, newapprox, eol, j, i], LIVEOUT: [num, newapprox, eol, j, i], GEN [newapprox] KILL []
;STOREF newapprox approx [FRMT-10]; --- LIVEIN: [num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [newapprox] KILL [approx]
;STOREI 1 $T9 [FRMT-0]; --- LIVEIN: [approx, num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, $T9, j, i], GEN [] KILL [$T9]
;SUBI i $T9 $T10 [FRMT-7]; --- LIVEIN: [approx, num, newapprox, eol, $T9, j, i], LIVEOUT: [num, approx, $T10, newapprox, eol, j], GEN [$T9, i] KILL [$T10]
;STOREI $T10 i [FRMT-2]; --- LIVEIN: [approx, num, $T10, newapprox, eol, j], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [$T10] KILL [i]
;JUMP label1 [FRMT-15]; --- LIVEIN: [approx, num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [] KILL []
;LABEL label2 [FRMT-8]; --- LIVEIN: [approx, num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [] KILL []
;WRITEF approx [FRMT-6]; --- LIVEIN: [approx, num, newapprox, eol, j, i], LIVEOUT: [num, approx, newapprox, eol, j, i], GEN [approx] KILL []
;----------------- tiny ------------------------
;-------------------------------------------------------
; ir node ;LABEL main! (FRMT-8)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;LINK! (FRMT-9)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;STOREF 7.0 $T1! (FRMT-1)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T1
; $T1: not loaded in any register..
; Attempting to allocate $T1
; $T1: not loaded in any register..
; allocating $T1@($-1) to r0
;-------------------------------------------------------
; ir node ;STOREF $T1 num! (FRMT-2)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T1
; $T1: not loaded in any register..
; Attempting to allocate $T1
; $T1: not loaded in any register..
; allocating $T1@($-1) to r0
; attempting to ensure num
; num: not loaded in any register..
; Attempting to allocate num
; num: not loaded in any register..
; allocating num@(num) to r1
; evicting r0 for opr $T1
; Checking Liveness $T1
; Live out: [num, newapprox, eol]
; $T1 is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;STOREI 5 $T2! (FRMT-0)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T2
; $T2: not loaded in any register..
; Attempting to allocate $T2
; $T2: not loaded in any register..
; allocating $T2@($-2) to r0
;-------------------------------------------------------
; ir node ;STOREI $T2 i! (FRMT-2)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T2
; $T2: not loaded in any register..
; Attempting to allocate $T2
; $T2: not loaded in any register..
; allocating $T2@($-2) to r0
; attempting to ensure i
; i: not loaded in any register..
; Attempting to allocate i
; i: not loaded in any register..
; allocating i@(i) to r1
; evicting r0 for opr $T2
; Checking Liveness $T2
; Live out: [num, newapprox, eol, i]
; $T2 is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;STOREI 1 $T3! (FRMT-0)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T3
; $T3: not loaded in any register..
; Attempting to allocate $T3
; $T3: not loaded in any register..
; allocating $T3@($-3) to r0
;-------------------------------------------------------
; ir node ;STOREI $T3 j! (FRMT-2)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T3
; $T3: not loaded in any register..
; Attempting to allocate $T3
; $T3: not loaded in any register..
; allocating $T3@($-3) to r0
; attempting to ensure j
; j: not loaded in any register..
; Attempting to allocate j
; j: not loaded in any register..
; allocating j@(j) to r1
; evicting r0 for opr $T3
; Checking Liveness $T3
; Live out: [num, newapprox, eol, j, i]
; $T3 is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;STOREF num approx! (FRMT-10)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure num
; num: not loaded in any register..
; Attempting to allocate num
; num: not loaded in any register..
; allocating num@(num) to r0
; attempting to ensure approx
; approx: not loaded in any register..
; Attempting to allocate approx
; approx: not loaded in any register..
; allocating approx@(approx) to r1
;-------------------------------------------------------
; ir node ;LABEL label1! (FRMT-8)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;STOREI 0 $T4! (FRMT-0)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure $T4
; $T4: not loaded in any register..
; Attempting to allocate $T4
; $T4: not loaded in any register..
; allocating $T4@($-4) to r0
;-------------------------------------------------------
; ir node ;EQI i $T4 label2! (FRMT-13)
; reg state : {r0=none, r1=none, r2=none, r3=none, }
; attempting to ensure i
; i: not loaded in any register..
; Attempting to allocate i
; i: not loaded in any register..
; allocating i@(i) to r0
; attempting to ensure $T4
; $T4: not loaded in any register..
; Attempting to allocate $T4
; $T4: not loaded in any register..
; allocating $T4@($-4) to r1
;-------------------------------------------------------
; ir node ;WRITEI i! (FRMT-6)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure i
; i: not loaded in any register..
; Attempting to allocate i
; i: not loaded in any register..
; allocating i@(i) to r0
;-------------------------------------------------------
; ir node ;WRITES eol! (FRMT-6)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;STOREF 0.5 $T5! (FRMT-1)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure $T5
; $T5: not loaded in any register..
; Attempting to allocate $T5
; $T5: not loaded in any register..
; allocating $T5@($-5) to r0
;-------------------------------------------------------
; ir node ;DIVF num approx $T6! (FRMT-3)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure num
; num: not loaded in any register..
; Attempting to allocate num
; num: not loaded in any register..
; allocating num@(num) to r0
; attempting to ensure approx
; approx: not loaded in any register..
; Attempting to allocate approx
; approx: not loaded in any register..
; allocating approx@(approx) to r2
; attempting to ensure $T6
; $T6: not loaded in any register..
; Attempting to allocate $T6
; $T6: not loaded in any register..
; allocating $T6@($-6) to r3
; evicting r2 for opr approx
; Checking Liveness approx
; Live out: [num, approx, $T6, $T5, eol, j, i]
; approx is live
; free: false, dirty:false, live: true
; evicting r0 for opr num
; Checking Liveness num
; Live out: [num, approx, $T6, $T5, eol, j, i]
; num is live
; free: false, dirty:false, live: true
;-------------------------------------------------------
; ir node ;ADDF approx $T6 $T7! (FRMT-7)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure approx
; approx: not loaded in any register..
; Attempting to allocate approx
; approx: not loaded in any register..
; allocating approx@(approx) to r0
; attempting to ensure $T6
; $T6: not loaded in any register..
; Attempting to allocate $T6
; $T6: not loaded in any register..
; allocating $T6@($-6) to r2
; attempting to ensure $T7
; $T7: not loaded in any register..
; Attempting to allocate $T7
; $T7: not loaded in any register..
; allocating $T7@($-7) to r3
; evicting r2 for opr $T6
; Checking Liveness $T6
; Live out: [num, $T7, $T5, eol, j, i]
; $T6 is dead
; free: false, dirty:false, live: false
; evicting r0 for opr approx
; Checking Liveness approx
; Live out: [num, $T7, $T5, eol, j, i]
; approx is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;MULTF $T5 $T7 $T8! (FRMT-5)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure $T5
; $T5: not loaded in any register..
; Attempting to allocate $T5
; $T5: not loaded in any register..
; allocating $T5@($-5) to r0
; attempting to ensure $T7
; $T7: not loaded in any register..
; Attempting to allocate $T7
; $T7: not loaded in any register..
; allocating $T7@($-7) to r2
; attempting to ensure $T8
; $T8: not loaded in any register..
; Attempting to allocate $T8
; $T8: not loaded in any register..
; allocating $T8@($-8) to r3
; evicting r2 for opr $T7
; Checking Liveness $T7
; Live out: [num, eol, $T8, j, i]
; $T7 is dead
; free: false, dirty:false, live: false
; evicting r0 for opr $T5
; Checking Liveness $T5
; Live out: [num, eol, $T8, j, i]
; $T5 is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;STOREF $T8 newapprox! (FRMT-2)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure $T8
; $T8: not loaded in any register..
; Attempting to allocate $T8
; $T8: not loaded in any register..
; allocating $T8@($-8) to r0
; attempting to ensure newapprox
; newapprox: not loaded in any register..
; Attempting to allocate newapprox
; newapprox: not loaded in any register..
; allocating newapprox@(newapprox) to r2
; evicting r0 for opr $T8
; Checking Liveness $T8
; Live out: [num, newapprox, eol, j, i]
; $T8 is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;WRITEF newapprox! (FRMT-6)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure newapprox
; newapprox: not loaded in any register..
; Attempting to allocate newapprox
; newapprox: not loaded in any register..
; allocating newapprox@(newapprox) to r0
;-------------------------------------------------------
; ir node ;STOREF newapprox approx! (FRMT-10)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure newapprox
; newapprox: not loaded in any register..
; Attempting to allocate newapprox
; newapprox: not loaded in any register..
; allocating newapprox@(newapprox) to r0
; attempting to ensure approx
; approx: not loaded in any register..
; Attempting to allocate approx
; approx: not loaded in any register..
; allocating approx@(approx) to r2
;-------------------------------------------------------
; ir node ;STOREI 1 $T9! (FRMT-0)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure $T9
; $T9: not loaded in any register..
; Attempting to allocate $T9
; $T9: not loaded in any register..
; allocating $T9@($-9) to r0
;-------------------------------------------------------
; ir node ;SUBI i $T9 $T10! (FRMT-7)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure i
; i: not loaded in any register..
; Attempting to allocate i
; i: not loaded in any register..
; allocating i@(i) to r0
; attempting to ensure $T9
; $T9: not loaded in any register..
; Attempting to allocate $T9
; $T9: not loaded in any register..
; allocating $T9@($-9) to r2
; attempting to ensure $T10
; $T10: not loaded in any register..
; Attempting to allocate $T10
; $T10: not loaded in any register..
; allocating $T10@($-10) to r3
; evicting r2 for opr $T9
; Checking Liveness $T9
; Live out: [num, approx, $T10, newapprox, eol, j]
; $T9 is dead
; free: false, dirty:false, live: false
; evicting r0 for opr i
; Checking Liveness i
; Live out: [num, approx, $T10, newapprox, eol, j]
; i is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;STOREI $T10 i! (FRMT-2)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure $T10
; $T10: not loaded in any register..
; Attempting to allocate $T10
; $T10: not loaded in any register..
; allocating $T10@($-10) to r0
; attempting to ensure i
; i: not loaded in any register..
; Attempting to allocate i
; i: not loaded in any register..
; allocating i@(i) to r2
; evicting r0 for opr $T10
; Checking Liveness $T10
; Live out: [num, approx, newapprox, eol, j, i]
; $T10 is dead
; free: false, dirty:false, live: false
;-------------------------------------------------------
; ir node ;JUMP label1! (FRMT-15)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;LABEL label2! (FRMT-8)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
;-------------------------------------------------------
; ir node ;WRITEF approx! (FRMT-6)
; reg state : {r0=none, r1=$T4, r2=none, r3=none, }
; attempting to ensure approx
; approx: not loaded in any register..
; Attempting to allocate approx
; approx: not loaded in any register..
; allocating approx@(approx) to r0
var i
var j
var newapprox
var approx
var num
str eol "\n"
push
push r0
push r1
push r2
push r3
jsr main
sys halt
;------------------;LABEL main ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

label main

;Spilling (flush) registers

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
link 15
;------------------;STOREF 7.0 $T1 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-1 r0 ; load ensure $T1

move 7.0 r0

;Spilling (flush) registers

move r0 $-1

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREF $T1 num ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-1 r0 ; load ensure $T1

move num r1 ; load ensure num

move r0 r1


;Spilling (flush) registers

move r1 num

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREI 5 $T2 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-2 r0 ; load ensure $T2

move 5 r0

;Spilling (flush) registers

move r0 $-2

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREI $T2 i ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-2 r0 ; load ensure $T2

move i r1 ; load ensure i

move r0 r1


;Spilling (flush) registers

move r1 i

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREI 1 $T3 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-3 r0 ; load ensure $T3

move 1 r0

;Spilling (flush) registers

move r0 $-3

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREI $T3 j ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-3 r0 ; load ensure $T3

move j r1 ; load ensure j

move r0 r1


;Spilling (flush) registers

move r1 j

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREF num approx ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move num r0 ; load ensure num

move approx r1 ; load ensure approx

move r0 r1

;Spilling (flush) registers

move r0 num

move r1 approx

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;LABEL label1 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

label label1

;Spilling (flush) registers

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;STOREI 0 $T4 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move $-4 r0 ; load ensure $T4

move 0 r0

;Spilling (flush) registers

move r0 $-4

;Flush done

;  {r0=none, r1=none, r2=none, r3=none, }
;------------------;EQI i $T4 label2 ----------------
;  {r0=none, r1=none, r2=none, r3=none, }

move i r0 ; load ensure i

move $-4 r1 ; load ensure $T4

cmpi r0 r1
jeq label2

;Spilling (flush) registers

move r0 i

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;WRITEI i ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move i r0 ; load ensure i

sys writei r0

;Spilling (flush) registers

move r0 i

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;WRITES eol ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

sys writes eol

;Spilling (flush) registers

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;STOREF 0.5 $T5 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move $-5 r0 ; load ensure $T5

move 0.5 r0

;Spilling (flush) registers

move r0 $-5

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;DIVF num approx $T6 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move num r0 ; load ensure num

move approx r2 ; load ensure approx

divr r2 r0
move $-6 r3 ; load ensure $T6

move r0 r3



;Spilling (flush) registers

move r3 $-6

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;ADDF approx $T6 $T7 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move approx r0 ; load ensure approx

move $-6 r2 ; load ensure $T6

addr r2 r0
move $-7 r3 ; load ensure $T7

move r0 r3



;Spilling (flush) registers

move r3 $-7

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;MULTF $T5 $T7 $T8 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move $-5 r0 ; load ensure $T5

move $-7 r2 ; load ensure $T7

mulr r2 r0
move $-8 r3 ; load ensure $T8

move r0 r3



;Spilling (flush) registers

move r3 $-8

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;STOREF $T8 newapprox ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move $-8 r0 ; load ensure $T8

move newapprox r2 ; load ensure newapprox

move r0 r2


;Spilling (flush) registers

move r2 newapprox

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;WRITEF newapprox ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move newapprox r0 ; load ensure newapprox

sys writer r0

;Spilling (flush) registers

move r0 newapprox

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;STOREF newapprox approx ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move newapprox r0 ; load ensure newapprox

move approx r2 ; load ensure approx

move r0 r2

;Spilling (flush) registers

move r0 newapprox

move r2 approx

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;STOREI 1 $T9 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move $-9 r0 ; load ensure $T9

move 1 r0

;Spilling (flush) registers

move r0 $-9

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;SUBI i $T9 $T10 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move i r0 ; load ensure i

move $-9 r2 ; load ensure $T9

subi r2 r0
move $-10 r3 ; load ensure $T10

move r0 r3



;Spilling (flush) registers

move r3 $-10

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;STOREI $T10 i ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move $-10 r0 ; load ensure $T10

move i r2 ; load ensure i

move r0 r2


;Spilling (flush) registers

move r2 i

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;JUMP label1 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

jmp label1

;Spilling (flush) registers

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;LABEL label2 ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

label label2

;Spilling (flush) registers

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }
;------------------;WRITEF approx ----------------
;  {r0=none, r1=$T4, r2=none, r3=none, }

move approx r0 ; load ensure approx

sys writer r0

;Spilling (flush) registers

move r0 approx

;Flush done

;  {r0=none, r1=$T4, r2=none, r3=none, }

